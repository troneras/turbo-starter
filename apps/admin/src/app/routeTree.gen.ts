/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UsersRouteImport } from './routes/users'
import { Route as TranslationsSimpleRouteImport } from './routes/translations-simple'
import { Route as TranslationsRouteImport } from './routes/translations'
import { Route as RolesRouteImport } from './routes/roles'
import { Route as ReleasesRouteImport } from './routes/releases'
import { Route as LoginRouteImport } from './routes/login'
import { Route as LanguagesRouteImport } from './routes/languages'
import { Route as KeysRouteImport } from './routes/keys'
import { Route as JurisdictionsRouteImport } from './routes/jurisdictions'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as BrandsRouteImport } from './routes/brands'
import { Route as IndexRouteImport } from './routes/index'

const UsersRoute = UsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => rootRouteImport,
} as any)
const TranslationsSimpleRoute = TranslationsSimpleRouteImport.update({
  id: '/translations-simple',
  path: '/translations-simple',
  getParentRoute: () => rootRouteImport,
} as any)
const TranslationsRoute = TranslationsRouteImport.update({
  id: '/translations',
  path: '/translations',
  getParentRoute: () => rootRouteImport,
} as any)
const RolesRoute = RolesRouteImport.update({
  id: '/roles',
  path: '/roles',
  getParentRoute: () => rootRouteImport,
} as any)
const ReleasesRoute = ReleasesRouteImport.update({
  id: '/releases',
  path: '/releases',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const LanguagesRoute = LanguagesRouteImport.update({
  id: '/languages',
  path: '/languages',
  getParentRoute: () => rootRouteImport,
} as any)
const KeysRoute = KeysRouteImport.update({
  id: '/keys',
  path: '/keys',
  getParentRoute: () => rootRouteImport,
} as any)
const JurisdictionsRoute = JurisdictionsRouteImport.update({
  id: '/jurisdictions',
  path: '/jurisdictions',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const BrandsRoute = BrandsRouteImport.update({
  id: '/brands',
  path: '/brands',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/brands': typeof BrandsRoute
  '/dashboard': typeof DashboardRoute
  '/jurisdictions': typeof JurisdictionsRoute
  '/keys': typeof KeysRoute
  '/languages': typeof LanguagesRoute
  '/login': typeof LoginRoute
  '/releases': typeof ReleasesRoute
  '/roles': typeof RolesRoute
  '/translations': typeof TranslationsRoute
  '/translations-simple': typeof TranslationsSimpleRoute
  '/users': typeof UsersRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/brands': typeof BrandsRoute
  '/dashboard': typeof DashboardRoute
  '/jurisdictions': typeof JurisdictionsRoute
  '/keys': typeof KeysRoute
  '/languages': typeof LanguagesRoute
  '/login': typeof LoginRoute
  '/releases': typeof ReleasesRoute
  '/roles': typeof RolesRoute
  '/translations': typeof TranslationsRoute
  '/translations-simple': typeof TranslationsSimpleRoute
  '/users': typeof UsersRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/brands': typeof BrandsRoute
  '/dashboard': typeof DashboardRoute
  '/jurisdictions': typeof JurisdictionsRoute
  '/keys': typeof KeysRoute
  '/languages': typeof LanguagesRoute
  '/login': typeof LoginRoute
  '/releases': typeof ReleasesRoute
  '/roles': typeof RolesRoute
  '/translations': typeof TranslationsRoute
  '/translations-simple': typeof TranslationsSimpleRoute
  '/users': typeof UsersRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/brands'
    | '/dashboard'
    | '/jurisdictions'
    | '/keys'
    | '/languages'
    | '/login'
    | '/releases'
    | '/roles'
    | '/translations'
    | '/translations-simple'
    | '/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/brands'
    | '/dashboard'
    | '/jurisdictions'
    | '/keys'
    | '/languages'
    | '/login'
    | '/releases'
    | '/roles'
    | '/translations'
    | '/translations-simple'
    | '/users'
  id:
    | '__root__'
    | '/'
    | '/brands'
    | '/dashboard'
    | '/jurisdictions'
    | '/keys'
    | '/languages'
    | '/login'
    | '/releases'
    | '/roles'
    | '/translations'
    | '/translations-simple'
    | '/users'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BrandsRoute: typeof BrandsRoute
  DashboardRoute: typeof DashboardRoute
  JurisdictionsRoute: typeof JurisdictionsRoute
  KeysRoute: typeof KeysRoute
  LanguagesRoute: typeof LanguagesRoute
  LoginRoute: typeof LoginRoute
  ReleasesRoute: typeof ReleasesRoute
  RolesRoute: typeof RolesRoute
  TranslationsRoute: typeof TranslationsRoute
  TranslationsSimpleRoute: typeof TranslationsSimpleRoute
  UsersRoute: typeof UsersRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/users': {
      id: '/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/translations-simple': {
      id: '/translations-simple'
      path: '/translations-simple'
      fullPath: '/translations-simple'
      preLoaderRoute: typeof TranslationsSimpleRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/translations': {
      id: '/translations'
      path: '/translations'
      fullPath: '/translations'
      preLoaderRoute: typeof TranslationsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/roles': {
      id: '/roles'
      path: '/roles'
      fullPath: '/roles'
      preLoaderRoute: typeof RolesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/releases': {
      id: '/releases'
      path: '/releases'
      fullPath: '/releases'
      preLoaderRoute: typeof ReleasesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/languages': {
      id: '/languages'
      path: '/languages'
      fullPath: '/languages'
      preLoaderRoute: typeof LanguagesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/keys': {
      id: '/keys'
      path: '/keys'
      fullPath: '/keys'
      preLoaderRoute: typeof KeysRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/jurisdictions': {
      id: '/jurisdictions'
      path: '/jurisdictions'
      fullPath: '/jurisdictions'
      preLoaderRoute: typeof JurisdictionsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/brands': {
      id: '/brands'
      path: '/brands'
      fullPath: '/brands'
      preLoaderRoute: typeof BrandsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BrandsRoute: BrandsRoute,
  DashboardRoute: DashboardRoute,
  JurisdictionsRoute: JurisdictionsRoute,
  KeysRoute: KeysRoute,
  LanguagesRoute: LanguagesRoute,
  LoginRoute: LoginRoute,
  ReleasesRoute: ReleasesRoute,
  RolesRoute: RolesRoute,
  TranslationsRoute: TranslationsRoute,
  TranslationsSimpleRoute: TranslationsSimpleRoute,
  UsersRoute: UsersRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
